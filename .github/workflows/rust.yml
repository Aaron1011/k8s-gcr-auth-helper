name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  unix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        rust: [stable]

    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@v2
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Release
      run: cargo build --verbose --release
    - name: Determine Target Env
      run: |
        eval $(rustc --print cfg | grep target_)
        echo "::set-env target_triple=${target_arch:-unknown}-${target_vendor:-unknown}-${target_os:-unknown}"
    - name: Debugging
      run: |
        echo target_triple=${target_triple}
        echo target_triple=${{ env.target_triple }}
    - name: Upload build artifact
      uses: actions/upload-artifact@v1
      with:
        name: k8s-gcr-auth-helper-${{ env.target_triple }}
        path: target/release/k8s-gcr-auth-helper
  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust: [stable]
    steps:
#    - name: Cache vcpkg install openssl
#      uses: actions/cache@v1
#      with:
#        key: ${{ runner.os }}-vcpkg-1
#        path: 'C:/vcpkg/'
#    - name: Install openssl
#      run: |
#        vcpkg search opensll
#        vcpkg install openssl
#        vcpkg integrate install
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@v2
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: Build
      run: cargo build --verbose --no-default-features --features rustls-tls
      env:
        RUSTFLAGS: '-Ctarget-feature=+crt-static'
        OPENSSL_DIR: 'C:/vcpkg/packages/openssl_x86-windows/share/openssl/'
    - name: Run tests
      run: cargo test --verbose --no-default-features --features rustls-tls
      env:
        RUSTFLAGS: '-Ctarget-feature=+crt-static'
        OPENSSL_DIR: 'C:/vcpkg/packages/openssl_x86-windows/share/openssl/'
    - name: Release
      run: cargo build --verbose --release --no-default-features --features rustls-tls
      env:
        RUSTFLAGS: '-Ctarget-feature=+crt-static'
        OPENSSL_DIR: 'C:/vcpkg/packages/openssl_x86-windows/share/openssl/'
    - name: Upload build artifact
      uses: actions/upload-artifact@v1
      with:
        name: k8s-gcr-auth-helper-x86_64-pc-windows-msvc
        path: target/release/k8s-gcr-auth-helper.exe
